"""
Tests for hotness scoring functionality
"""
import asyncio
import logging
from datetime import datetime, timedelta
import sys
from pathlib import Path

# Add project root to path
project_root = str(Path(__file__).parent.parent)
sys.path.append(project_root)

from backend.ai_model.hotness_scorer import HotnessScorer
from backend.data.moex_indices import MOEX_INDEX_TICKERS

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_hotness_scoring():
    """Test hotness scoring for a sample news item"""
    scorer = HotnessScorer()
    
    # Use a historical date when MOEX was open (2025-10-01 14:30:00)
    news_time = datetime(2025, 10, 1, 14, 30, 0)
    
    # Test news item for Oil & Gas sector
    test_news = {
        'title': '–ì–∞–∑–ø—Ä–æ–º —É–≤–µ–ª–∏—á–∏–ª –¥–æ–±—ã—á—É –≥–∞–∑–∞ –Ω–∞ 10%',
        'text': '–ö–æ–º–ø–∞–Ω–∏—è –ì–∞–∑–ø—Ä–æ–º —Å–æ–æ–±—â–∏–ª–∞ –æ —Ä–µ–∫–æ—Ä–¥–Ω–æ–π –¥–æ–±—ã—á–µ –≥–∞–∑–∞ –≤ —ç—Ç–æ–º –∫–≤–∞—Ä—Ç–∞–ª–µ.',
        'source': '–¢–µ—Å—Ç–æ–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫',
        'date': news_time.isoformat(),
        'tags': ['–ù–µ—Ñ—Ç—å –∏ –≥–∞–∑']
    }
    
    logger.info("üß™ Testing hotness scoring...")
    logger.info(f"üì∞ News: {test_news['title']}")
    logger.info(f"üè∑Ô∏è Sector: {test_news['tags'][0]}")
    metrics = await scorer.calculate_hotness(test_news, news_time)
    
    if metrics:
        logger.info("‚úÖ Hotness metrics:")
        logger.info(f"   üìà Immediate price (15min): {metrics.immediate_price_change:.3f}")
        logger.info(f"   üìä Sustained price (1h): {metrics.sustained_price_change:.3f}")
        logger.info(f"   üìä Volume anomaly: {metrics.volume_anomaly:.3f}")
        logger.info(f"   üìä Volatility spike: {metrics.volatility_spike:.3f}")
        logger.info(f"   üî• Hotness score: {metrics.hotness_score:.3f}")
        
        # Determine hotness level
        if metrics.hotness_score >= 0.7:
            level = "HIGH"
        elif metrics.hotness_score >= 0.4:
            level = "MEDIUM"
        else:
            level = "LOW"
            
        logger.info(f"   üö® Hotness level: {level}")
    else:
        logger.error("‚ùå Failed to calculate hotness metrics")

async def test_all_sectors():
    """Test hotness scoring for all sectors"""
    scorer = HotnessScorer()
    
    for sector, ticker in MOEX_INDEX_TICKERS.items():
        logger.info(f"\nüîç Testing sector: {sector} ({ticker})")
        
        test_news = {
            'title': f'–¢–µ—Å—Ç–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è —Å–µ–∫—Ç–æ—Ä–∞ {sector}',
            'text': f'–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –¥–ª—è —Å–µ–∫—Ç–æ—Ä–∞ {sector}. –í–∞–∂–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ —Ä—ã–Ω–∫–µ.',
            'source': '–¢–µ—Å—Ç–æ–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫',
            'date': (datetime.now() - timedelta(hours=2)).isoformat(),
            'tags': [sector]
        }
        
        news_time = datetime.fromisoformat(test_news['date'])
        metrics = await scorer.calculate_hotness(test_news, news_time)
        
        if metrics:
            logger.info(f"   ‚úÖ Hotness: {metrics.hotness_score:.3f}")
        else:
            logger.info("   ‚ùå Data not available")

if __name__ == "__main__":
    logger.info("üöÄ Starting hotness scoring tests...")
    
    # Run single test
    asyncio.run(test_hotness_scoring())
    
    # Uncomment to test all sectors (takes longer)
    # asyncio.run(test_all_sectors())
