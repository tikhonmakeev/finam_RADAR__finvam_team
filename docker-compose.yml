services:
  nginx:
    image: nginx:alpine
    container_name: nginx_proxy
    ports:
      - "80:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./dist/frontend/browser:/usr/share/nginx/html:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - backend
      - frontend
    networks:
      - app-network
    restart: unless-stopped

  backend:
    build: ./backend
    env_file: .env
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
    expose:
      - "8081"

  frontend:
    build:
      context: ./frontend
      target: build
    networks:
      - app-network
    volumes:
      - ./frontend/dist/frontend/browser:/usr/share/nginx/html:ro

  db:
    image: pgvector/pgvector:pg17-bookworm
    env_file:
      - .env
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin_container
    restart: always
    env_file:
      - .env
    ports:
      - "5050:80"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge
