import asyncio
import requests
import logging
import sys
import time
import os
from pathlib import Path
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º URL –∏–∑ .env –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
LLM_API_URL = os.getenv('LLM_API_URL', 'http://127.0.0.1:11434')

# –£–õ–£–ß–®–ï–ù–ù–´–ô –ü–†–û–ú–ü–¢
SYSTEM_PROMPT_TAGGER = """
–¢—ã ‚Äî –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π. –¢–≤–æ—è –ï–î–ò–ù–°–¢–í–ï–ù–ù–ê–Ø –∑–∞–¥–∞—á–∞ ‚Äî –≤—ã–±—Ä–∞—Ç—å –û–î–ò–ù —Ç–µ–≥ –∏–∑ —Å–ø–∏—Å–∫–∞.

–°–ü–ò–°–û–ö –¢–ï–ì–û–í (—Ç–æ–ª—å–∫–æ —ç—Ç–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã):
–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
–ú–µ—Ç–∞–ª–ª—ã –∏ –¥–æ–±—ã—á–∞
–ú–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
–ù–µ—Ñ—Ç—å –∏ –≥–∞–∑
–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–∏–π —Å–µ–∫—Ç–æ—Ä
–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏
–¢–µ–ª–µ–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏
–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç
–§–∏–Ω–∞–Ω—Å—ã
–§–∏–Ω—Ç–µ—Ö
–§–∞—Ä–º–∞—Ü–µ–≤—Ç–∏–∫–∞
–•–∏–º–∏—è –∏ –Ω–µ—Ñ—Ç–µ—Ö–∏–º–∏—è
–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞
None

–ñ–ï–°–¢–ö–ò–ï –ü–†–ê–í–ò–õ–ê:
1. –í–æ–∑–≤—Ä–∞—â–∞–π –¢–û–õ–¨–ö–û –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–≥–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ –∏–ª–∏ 'None'
2. –ù–ò–ö–ê–ö–ò–• –æ–±—ä—è—Å–Ω–µ–Ω–∏–π, —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
3. –ï—Å–ª–∏ –Ω–æ–≤–æ—Å—Ç—å –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –Ω–∏ –ø–æ–¥ –æ–¥–∏–Ω —Ç–µ–≥ ‚Äî —Å—Ç—Ä–æ–≥–æ 'None'
4. –í—ã–±–∏—Ä–∞–π –Ω–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π —Ç–µ–≥ –ø–æ –°–£–¢–ò –±–∏–∑–Ω–µ—Å–∞/–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

–ü–†–ò–ú–ï–†–´ –û–¢–í–ï–¢–û–í:
"–ö–æ–º–ø–∞–Ω–∏—è Apple –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª–∞ –Ω–æ–≤—ã–π iPhone" ‚Üí "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"
"–ì–∞–∑–ø—Ä–æ–º —É–≤–µ–ª–∏—á–∏–ª –¥–æ–±—ã—á—É –≥–∞–∑–∞" ‚Üí "–ù–µ—Ñ—Ç—å –∏ –≥–∞–∑" 
"–¶–ë –ø–æ–≤—ã—Å–∏–ª –∫–ª—é—á–µ–≤—É—é —Å—Ç–∞–≤–∫—É" ‚Üí "–§–∏–Ω–∞–Ω—Å—ã"
"–û—Ç–∫—Ä—ã–ª–∞—Å—å –Ω–æ–≤–∞—è —Å—Ç–∞–Ω—Ü–∏—è –º–µ—Ç—Ä–æ" ‚Üí "None"
"–°–±–µ—Ä–±–∞–Ω–∫ –∑–∞–ø—É—Å—Ç–∏–ª –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ" ‚Üí "–§–∏–Ω—Ç–µ—Ö"

–¢–í–û–ô –û–¢–í–ï–¢ –î–û–õ–ñ–ï–ù –ë–´–¢–¨ –û–î–ù–û–ô –°–¢–†–û–ö–û–ô –ë–ï–ó –ö–ê–í–´–ß–ï–ö!
"""


def check_ollama_availability():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Ollama"""
    try:
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Ollama –ø–æ –∞–¥—Ä–µ—Å—É: {LLM_API_URL}")
        response = requests.get(f"{LLM_API_URL}/api/tags", timeout=500)
        if response.status_code == 200:
            models = response.json().get('models', [])
            logger.info(f"‚úÖ Ollama –¥–æ—Å—Ç—É–ø–µ–Ω. –ú–æ–¥–µ–ª–∏: {[m['name'] for m in models]}")
            return True
        else:
            logger.error(f"‚ùå Ollama –æ—Ç–≤–µ—á–∞–µ—Ç —Å –æ—à–∏–±–∫–æ–π: {response.status_code}")
            return False
    except requests.exceptions.ConnectionError:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Ollama –ø–æ –∞–¥—Ä–µ—Å—É {LLM_API_URL}")
        return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False


def get_fast_model():
    """–í—ã–±–∏—Ä–∞–µ–º –±—ã—Å—Ç—Ä—É—é –º–æ–¥–µ–ª—å –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö"""
    try:
        response = requests.get(f"{LLM_API_URL}/api/tags", timeout=500)
        if response.status_code == 200:
            models = response.json().get('models', [])
            model_names = [m['name'] for m in models]

            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –±—ã—Å—Ç—Ä—ã—Ö –º–æ–¥–µ–ª–µ–π
            fast_models = [
                'phi4-mini:latest',  # –°–∞–º–∞—è –±—ã—Å—Ç—Ä–∞—è
                'llama3.2:1b',  # –û—á–µ–Ω—å –ª–µ–≥–∫–∞—è
                'llama3.2:3b',  # –õ–µ–≥–∫–∞—è
            ]

            # –ò—â–µ–º –±—ã—Å—Ç—Ä—É—é –º–æ–¥–µ–ª—å –∏–∑ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
            for fast_model in fast_models:
                for available_model in model_names:
                    if fast_model in available_model:
                        logger.info(f"üöÄ –í—ã–±—Ä–∞–Ω–∞ –±—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å: {available_model}")
                        return available_model

            # –ï—Å–ª–∏ –±—ã—Å—Ç—Ä—ã—Ö –Ω–µ—Ç, –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é
            if model_names:
                logger.info(f"‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å: {model_names[0]}")
                return model_names[0]
            else:
                logger.error("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")
                return None

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –º–æ–¥–µ–ª–∏: {e}")
        return None


def test_prompt_tagger_improved():
    """–£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""

    if not check_ollama_availability():
        return False

    # –í—ã–±–∏—Ä–∞–µ–º –º–æ–¥–µ–ª—å
    model_name = get_fast_model()
    if not model_name:
        return False

    # –¢–µ—Å—Ç–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
    test_cases = [
        "–ö–æ–º–ø–∞–Ω–∏—è –ì–∞–∑–ø—Ä–æ–º —É–≤–µ–ª–∏—á–∏–ª–∞ –¥–æ–±—ã—á—É –≥–∞–∑–∞ –Ω–∞ 10%",
        "Apple –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª–∞ –Ω–æ–≤—ã–π iPhone —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º",
        "–ë–∞–Ω–∫ –†–æ—Å—Å–∏–∏ –ø–æ–≤—ã—Å–∏–ª –∫–ª—é—á–µ–≤—É—é —Å—Ç–∞–≤–∫—É –¥–æ 15%",
        "–í –ú–æ—Å–∫–≤–µ –æ—Ç–∫—Ä—ã–ª—Å—è –Ω–æ–≤—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä",
        "–ù–æ—Ä–∏–ª—å—Å–∫–∏–π –Ω–∏–∫–µ–ª—å —Å–æ–æ–±—â–∏–ª –æ —Ä–æ—Å—Ç–µ –¥–æ–±—ã—á–∏ –ø–∞–ª–ª–∞–¥–∏—è",
        "–°–±–µ—Ä–±–∞–Ω–∫ –∑–∞–ø—É—Å—Ç–∏–ª —Å–µ—Ä–≤–∏—Å —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π",
    ]

    for i, test_text in enumerate(test_cases, 1):
        logger.info(f"\nüß™ –¢–µ—Å—Ç {i}: {test_text}")

        # –£–õ–£–ß–®–ï–ù–ù–´–ô –ü–†–û–ú–ü–¢ - —á–µ—Ç–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
        prompt = f"""{SYSTEM_PROMPT_TAGGER}

–ù–û–í–û–°–¢–¨ –î–õ–Ø –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–ò: "{test_text}"

–¢–ï–ì:"""

        try:
            response = requests.post(
                f"{LLM_API_URL}/api/generate",
                json={
                    "model": model_name,
                    "prompt": prompt,
                    "stream": False,
                    "options": {
                        "temperature": 0.0,  # –ú–ò–ù–ò–ú–ê–õ–¨–ù–ê–Ø —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å
                        "num_predict": 10,  # –û–ß–ï–ù–¨ –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç
                        "top_k": 1,  # –¢–æ–ª—å–∫–æ —Å–∞–º—ã–π –≤–µ—Ä–æ—è—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
                    }
                },
                timeout=500
            )

            if response.status_code == 200:
                result = response.json()
                response_text = result.get('response', '').strip()

                # –û–ß–ò–°–¢–ö–ê –æ—Ç–≤–µ—Ç–∞ - –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É, —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–µ–µ
                cleaned_response = response_text.split('\n')[0].strip()
                cleaned_response = cleaned_response.replace('"', '').replace("'", "")

                logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: '{cleaned_response}'")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–µ–≥–∞
                valid_tags = [
                    "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "–ú–µ—Ç–∞–ª–ª—ã –∏ –¥–æ–±—ã—á–∞", "–ú–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏",
                    "–ù–µ—Ñ—Ç—å –∏ –≥–∞–∑", "–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–∏–π —Å–µ–∫—Ç–æ—Ä", "–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏",
                    "–¢–µ–ª–µ–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–§–∏–Ω–∞–Ω—Å—ã", "–§–∏–Ω—Ç–µ—Ö",
                    "–§–∞—Ä–º–∞—Ü–µ–≤—Ç–∏–∫–∞", "–•–∏–º–∏—è –∏ –Ω–µ—Ñ—Ç–µ—Ö–∏–º–∏—è", "–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞", "None"
                ]

                if cleaned_response in valid_tags:
                    logger.info(f"üéØ –í–ê–õ–ò–î–ù–´–ô —Ç–µ–≥!")
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–ï–í–ê–õ–ò–î–ù–´–ô —Ç–µ–≥: '{cleaned_response}'")

            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
                return False

        except requests.exceptions.Timeout:
            logger.error("‚ùå –¢–∞–π–º–∞—É—Ç")
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return False

    return True


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –£–õ–£–ß–®–ï–ù–ù–û–ì–û –ü–†–û–ú–ü–¢–ê...")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    if not check_ollama_availability():
        logger.error("‚ùå Ollama –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
        return

    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    logger.info("\n" + "=" * 60)
    logger.info("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–õ–ê–°–°–ò–§–ò–ö–ê–¢–û–†–ê –ù–û–í–û–°–¢–ï–ô")
    logger.info("=" * 60)

    success = test_prompt_tagger_improved()

    if success:
        logger.info("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
    else:
        logger.info("\nüí• –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ –° –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–ï–ô")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        logger.info("\n‚èπÔ∏è –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")